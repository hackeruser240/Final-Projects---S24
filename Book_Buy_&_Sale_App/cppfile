#include <iostream>
#include <string>
using namespace std;

class User {
private:
    string username;
    string password;

public:
    // Constructor
    User(string username, string password) : username(username), password(password) {}

    // Destructor
    ~User() {}

    // Getters
    string getUsername() const { return username; }
    string getPassword() const { return password; }
};

class Book {
private:
    string title;
    string author;
    string category;
    string isbn;
    int yearPublished;
    double price;

public:
    // Constructor
    Book(string title, string author, string category, string isbn, int yearPublished, double price) 
        : title(title), author(author), category(category), isbn(isbn), yearPublished(yearPublished), price(price) {}

    // Destructor
    ~Book() {}

    // Getters
    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    string getCategory() const { return category; }
    string getISBN() const { return isbn; }
    int getYearPublished() const { return yearPublished; }
    double getPrice() const { return price; }

    // Method to display book details
    void displayDetails() const {
        cout << "Title: " << title << endl;
        cout << "Author: " << author << endl;
        cout << "Category: " << category << endl;
        cout << "ISBN: " << isbn << endl;
        cout << "Year Published: " << yearPublished << endl;
        cout << "Price: $" << price << endl;
    }
};

class BookManager {
private:
    static const int MAX_BOOKS = 100;
    Book* books[MAX_BOOKS];
    int numBooks;

public:
    // Constructor
    BookManager() : numBooks(0) {}

    // Destructor
    ~BookManager() {
        for (int i = 0; i < numBooks; ++i) {
            delete books[i];
        }
    }

    // Method to add a book to the collection
    void addBook(const Book& book) {
        if (numBooks < MAX_BOOKS) {
            books[numBooks] = new Book(book);
            ++numBooks;
        } else {
            cerr << "Cannot add more books. Maximum capacity reached." << endl;
        }
    }

    // Method to list all books
    void listAllBooks() const {
        cout << "Listing all books:" << endl;
        for (int i = 0; i < numBooks; ++i) {
            books[i]->displayDetails();
            cout << endl;
        }
    }

    // Method to get book by ISBN
    Book* getBookByISBN(const std::string& isbn) {
        for (int i = 0; i < numBooks; ++i) {
            if (books[i]->getISBN() == isbn) {
                return books[i];
            }
        }
        return nullptr;
    }
};

class RatingAndReview {
private:
    string username;
    string bookTitle;
    int rating;
    string review;

public:
    // Constructor
    RatingAndReview(string username, string bookTitle, int rating, string review)
        : username(username), bookTitle(bookTitle), rating(rating), review(review) {}

    // Destructor
    ~RatingAndReview() {}

    // Getters
    string getUsername() const { return username; }
    string getBookTitle() const { return bookTitle; }
    int getRating() const { return rating; }
    string getReview() const { return review; }
};

class NotificationSystem {
public:
    // Method to send notification to user
    static void sendNotificationToUser(const string& username, const string& message) {
        cout << "Notification for " << username << ": " << message << endl;
    }
};

class OrderHistory {
private:
    static const int MAX_ORDERED_BOOKS = 100;
    Book* orderedBooks[MAX_ORDERED_BOOKS];
    int numOrderedBooks;

public:
    // Constructor
    OrderHistory() : numOrderedBooks(0) {}

    // Destructor
    ~OrderHistory() {
        for (int i = 0; i < numOrderedBooks; ++i) {
            delete orderedBooks[i];
        }
    }

    // Method to add book to order history
    void addToOrderHistory(const Book& book) {
        if (numOrderedBooks < MAX_ORDERED_BOOKS) {
            orderedBooks[numOrderedBooks] = new Book(book);
            ++numOrderedBooks;
        } else {
            cerr << "Cannot add more books to order history. Maximum capacity reached." << endl;
        }
    }

    // Method to display order history
    void displayOrderHistory() const {
        cout << "Order History:" << endl;
        for (int i = 0; i < numOrderedBooks; ++i) {
            orderedBooks[i]->displayDetails();
            cout << endl;
        }
    }
};

class ShoppingCart {
private:
    static const int MAX_ITEMS = 100;
    Book* items[MAX_ITEMS];
    int numItems;

public:
    // Constructor
    ShoppingCart() : numItems(0) {}

    // Destructor
    ~ShoppingCart() {
        for (int i = 0; i < numItems; ++i) {
            delete items[i];
        }
    }

    // Method to add a book to the shopping cart
    void addToCart(Book* book) {
        if (numItems < MAX_ITEMS) {
            items[numItems] = new Book(*book);
            ++numItems;
        } else {
            cerr << "Cannot add more items to the cart. Maximum capacity reached." << endl;
        }
    }

    // Method to display items in the shopping cart
    void displayCart() const {
        cout << "Items in the shopping cart:" << endl;
        for (int i = 0; i < numItems; ++i) {
            items[i]->displayDetails();
            cout << endl;
        }
    }

    // Method to get number of items in the cart
    int getNumItems() const {
        return numItems;
    }

    // Method to get item at a specific index
    Book* getItem(int index) const {
        if (index >= 0 && index < numItems) {
            return items[index];
        }
        return nullptr;
    }
};

class CheckoutProcess {
public:
    // Method for checkout process
    static void checkout(const ShoppingCart& cart) {
        double totalAmount = 0.0;
        cout << "Checking out..." << endl;
        for (int i = 0; i < cart.getNumItems(); ++i) {
            totalAmount += cart.getItem(i)->getPrice();
        }
        cout << "Total amount to pay: $" << totalAmount << endl;
        // Add payment processing logic here
    }
};

class AdminDashboard {
public:
    // Method to manage books
    static void manageBooks(BookManager& manager) {
        // Add your admin book management functionalities here
        cout << "Admin dashboard for book management." << endl;
    }
};

int main() {
    // Creating a user
    string username, password;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;
    User user(username, password);

    // Creating a BookManager instance
    BookManager manager;

    // Adding books
    char addBookChoice;
    do {
        std::string title, author, category, isbn;
        int yearPublished;
        double price;

        cout << "Enter book title: ";
        cin.ignore();
        getline(cin, title);

        cout << "Enter book author: ";
        getline(cin, author);

        cout << "Enter book category: ";
        getline(cin, category);

        cout << "Enter book ISBN: ";
        cin >> isbn;

        cout << "Enter year of publication: ";
        cin >> yearPublished;

        cout << "Enter book price: $";
        cin >> price;

        manager.addBook(Book(title, author, category, isbn, yearPublished, price));

        cout << "Do you want to add another book? (y/n): ";
        cin >> addBookChoice;
    } while (addBookChoice == 'y' || addBookChoice == 'Y');

    // Listing all books
    manager.listAllBooks();

    // Shopping Cart
    ShoppingCart cart;
    string addToCartChoice;
    do {
        string bookISBN;
        cout << "Enter ISBN of the book you want to add to cart: ";
        cin >> bookISBN;
        Book* bookToAdd = manager.getBookByISBN(bookISBN);
        if (bookToAdd != nullptr) {
            cart.addToCart(bookToAdd);
            cout << "Book added to cart." << endl;
        } else {
            cout << "Book not found. Please enter a valid ISBN." << endl;
        }
        cout << "Do you want to add another book to cart? (y/n): ";
        cin >> addToCartChoice;
    } while (addToCartChoice == "y" || addToCartChoice == "Y");

    // Displaying shopping cart
    cart.displayCart();

    // Checkout process
    CheckoutProcess::checkout(cart);

    // Order History
    OrderHistory orderHistory;

    // Rating and Review
    string bookISBN;
    int userRating;
    string userReview;

    cout << "Enter ISBN of the book you want to rate and review: ";
    cin >> bookISBN;
    cout << "Enter your rating (1-5): ";
    cin >> userRating;
    cout << "Enter your review: ";
    cin.ignore();
    getline(cin, userReview);

    RatingAndReview userReviewObj(user.getUsername(), manager.getBookByISBN(bookISBN)->getTitle(), userRating, userReview);

    // Sending notification to user
    string notificationMessage = "Thank you for your review on " + userReviewObj.getBookTitle();
    NotificationSystem::sendNotificationToUser(user.getUsername(), notificationMessage);

    // Adding book to order history
    orderHistory.addToOrderHistory(*(manager.getBookByISBN(bookISBN)));

    // Displaying order history
    orderHistory.displayOrderHistory();

    return 0;
}
